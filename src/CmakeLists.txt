cmake_minimum_required(VERSION 3.6 FATAL_ERROR)

project(server LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# hack for buggy CMake's FindwxWidgets script
if(DEFINED ENV_WX_CONFIG)
    set(ENV{WX_CONFIG} ${ENV_WX_CONFIG})
endif()

set(wxWidgets_USE_STATIC 1)

find_package(wxWidgets REQUIRED)

set(OpenCV_DIR C:/opencv/build)
find_package(OpenCV REQUIRED)
include_directories( ${OpenCV_INCLUDE_DIRS} )

set(SOURCES
    ./PNet/IPEndpoint.cpp 
    ./PNet/Network.cpp 
    ./PNet/Socket.cpp 
    ./PNet/Packet.cpp 
    ./PNet/TCPConnection.cpp 
    ./PNet/PacketManager.cpp 
    ./PNet/Server.cpp
    ./Server/MyServer.cpp
    ./Server/App.cpp
    ./Server/MainFrameServer.cpp
    )

set(HEADERS
    ./PNet/IncludeMe.h
    ./PNet/PacketType.h
    ./PNet/PResult.h
    ./PNet/SocketHandle.h
    ./PNet/SocketHandle.h
    ./PNet/SocketOption.h
    ./PNet/Constants.h
    ./PNet/PacketException.h
    ./PNet/Helpers.h
    ./PNet/IPEndpoint.h
    ./PNet/Network.h 
    ./PNet/Socket.h
    ./PNet/Packet.h 
    ./PNet/TCPConnection.h 
    ./PNet/PacketManager.h 
    ./PNet/Server.h 
    ./Server/MyServer.h
    ./Server/App.h
    ./Server/MainFrameServer.h
    )

include(${wxWidgets_USE_FILE})

if(APPLE)
    # create bundle on apple compiles
    add_executable(server MACOSX_BUNDLE ${SRCS})

    # Set a custom plist file for the app bundle - needed for Mac OS Retina display
    set_target_properties(server PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/Info.plist)
else()
    # the WIN32 is needed for Windows in order for it to look for WinMain
    # instead of the main function. This is ignored on other systems,
    # so it works on all platforms
    add_executable(server WIN32 ${SOURCES} ${HEADERS} main.exe.manifest)
    # add_executable(server ${SOURCES} ${HEADERS} main.exe.manifest)
endif()

target_link_libraries(server PRIVATE ${wxWidgets_LIBRARIES} ${OpenCV_LIBS} ws2_32)


#.......................................................


project(client LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# hack for buggy CMake's FindwxWidgets script
if(DEFINED ENV_WX_CONFIG)
    set(ENV{WX_CONFIG} ${ENV_WX_CONFIG})
endif()

set(wxWidgets_USE_STATIC 1)

find_package(wxWidgets REQUIRED)

set(OpenCV_DIR C:/opencv/build)
find_package(OpenCV REQUIRED)
include_directories( ${OpenCV_INCLUDE_DIRS} )

set(SOURCES
    ./PNet/IPEndpoint.cpp 
    ./PNet/Network.cpp 
    ./PNet/Socket.cpp 
    ./PNet/Packet.cpp 
    ./PNet/TCPConnection.cpp 
    ./PNet/PacketManager.cpp
    ./PNet/Client.cpp 
    ./Client/MyClient.cpp
    ./Client/App.cpp
    ./Client/MainFrameClient.cpp
    )

set(HEADERS
    ./PNet/IncludeMe.h
    ./PNet/PacketType.h
    ./PNet/PResult.h
    ./PNet/SocketHandle.h
    ./PNet/SocketHandle.h
    ./PNet/SocketOption.h
    ./PNet/Constants.h
    ./PNet/PacketException.h
    ./PNet/Helpers.h
    ./PNet/IPEndpoint.h
    ./PNet/Network.h 
    ./PNet/Socket.h
    ./PNet/Packet.h 
    ./PNet/TCPConnection.h 
    ./PNet/PacketManager.h 
    ./PNet/Client.h 
    ./Client/MyClient.h
    ./Client/App.h
    ./Client/MainFrameClient.h
    )

include(${wxWidgets_USE_FILE})

if(APPLE)
    # create bundle on apple compiles
    add_executable(client MACOSX_BUNDLE ${SRCS})

    # Set a custom plist file for the app bundle - needed for Mac OS Retina display
    set_target_properties(client PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/Info.plist)
else()
    # the WIN32 is needed for Windows in order for it to look for WinMain
    # instead of the main function. This is ignored on other systems,
    # so it works on all platforms
    add_executable(client WIN32 ${SOURCES} ${HEADERS} main.exe.manifest)
    # add_executable(client ${SOURCES} ${HEADERS} main.exe.manifest)
endif()

target_link_libraries(client PRIVATE ${wxWidgets_LIBRARIES} ${OpenCV_LIBS} ws2_32)
